<?php

namespace Tourze\RobotsTxtBundle\Tests\Model\RobotsTxtEntry;

use PHPUnit\Framework\TestCase;
use Tourze\RobotsTxtBundle\Model\RobotsTxtDirective;
use Tourze\RobotsTxtBundle\Model\RobotsTxtEntry;
use Tourze\RobotsTxtBundle\Model\RobotsTxtRule;

class RobotsTxtEntryFormatTest extends TestCase
{
    public function test_toString_withEmptyEntry(): void
    {
        $entry = new RobotsTxtEntry();
        $result = $entry->toString();
        
        $this->assertEquals('', $result);
        $this->assertEquals('', (string) $entry);
    }

    public function test_toString_withCommentsOnly(): void
    {
        $entry = new RobotsTxtEntry([], [], ['Generated by system', 'Last updated today']);
        $result = $entry->toString();
        
        $expected = "# Generated by system\n# Last updated today";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withSingleRule(): void
    {
        $rule = RobotsTxtRule::forAllAgents([
            RobotsTxtDirective::disallow('/admin/'),
            RobotsTxtDirective::allow('/api/')
        ]);
        $entry = new RobotsTxtEntry([$rule]);
        $result = $entry->toString();
        
        $expected = "User-agent: *\n" .
                   "Disallow: /admin/\n" .
                   "Allow: /api/";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withMultipleRules(): void
    {
        $rule1 = RobotsTxtRule::forAllAgents([RobotsTxtDirective::disallow('/admin/')]);
        $rule2 = RobotsTxtRule::forAgent('Googlebot', [RobotsTxtDirective::crawlDelay(10)]);
        
        $entry = new RobotsTxtEntry([$rule1, $rule2]);
        $result = $entry->toString();
        
        $expected = "User-agent: *\n" .
                   "Disallow: /admin/\n" .
                   "\n" .
                   "User-agent: Googlebot\n" .
                   "Crawl-delay: 10";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withSitemapsOnly(): void
    {
        $entry = new RobotsTxtEntry([], [
            'https://example.com/sitemap1.xml',
            'https://example.com/sitemap2.xml'
        ]);
        $result = $entry->toString();
        
        $expected = "Sitemap: https://example.com/sitemap1.xml\n" .
                   "Sitemap: https://example.com/sitemap2.xml";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withCommentsAndRules(): void
    {
        $rule = RobotsTxtRule::forAllAgents([RobotsTxtDirective::disallow('/private/')]);
        $entry = new RobotsTxtEntry([$rule], [], ['Auto-generated robots.txt']);
        $result = $entry->toString();
        
        $expected = "# Auto-generated robots.txt\n" .
                   "\n" .
                   "User-agent: *\n" .
                   "Disallow: /private/";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withCommentsAndSitemaps(): void
    {
        $entry = new RobotsTxtEntry([], ['https://example.com/sitemap.xml'], ['Generated by app']);
        $result = $entry->toString();
        
        $expected = "# Generated by app\n" .
                   "\n" .
                   "\n" .
                   "Sitemap: https://example.com/sitemap.xml";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withRulesAndSitemaps(): void
    {
        $rule = RobotsTxtRule::forAgent('Bingbot', [RobotsTxtDirective::allow('/search/')]);
        $entry = new RobotsTxtEntry([$rule], ['https://example.com/sitemap.xml']);
        $result = $entry->toString();
        
        $expected = "User-agent: Bingbot\n" .
                   "Allow: /search/\n" .
                   "\n" .
                   "Sitemap: https://example.com/sitemap.xml";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withAllComponents(): void
    {
        $rule1 = RobotsTxtRule::forAllAgents([RobotsTxtDirective::disallow('/admin/')]);
        $rule2 = RobotsTxtRule::forAgent('Googlebot', [
            RobotsTxtDirective::allow('/api/'),
            RobotsTxtDirective::crawlDelay(5)
        ]);
        
        $entry = new RobotsTxtEntry(
            [$rule1, $rule2],
            ['https://example.com/sitemap.xml', 'https://example.com/news-sitemap.xml'],
            ['Generated by RobotsTxtBundle', 'Version 1.0']
        );
        $result = $entry->toString();
        
        $expected = "# Generated by RobotsTxtBundle\n" .
                   "# Version 1.0\n" .
                   "\n" .
                   "User-agent: *\n" .
                   "Disallow: /admin/\n" .
                   "\n" .
                   "User-agent: Googlebot\n" .
                   "Allow: /api/\n" .
                   "Crawl-delay: 5\n" .
                   "\n" .
                   "Sitemap: https://example.com/sitemap.xml\n" .
                   "Sitemap: https://example.com/news-sitemap.xml";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withPrioritySorting(): void
    {
        $lowPriorityRule = RobotsTxtRule::forAgent('LowBot', [RobotsTxtDirective::disallow('/test/')], 10);
        $highPriorityRule = RobotsTxtRule::forAgent('HighBot', [RobotsTxtDirective::allow('/api/')], 100);
        $defaultPriorityRule = RobotsTxtRule::forAllAgents([RobotsTxtDirective::disallow('/admin/')], 0);
        
        $entry = new RobotsTxtEntry([$lowPriorityRule, $highPriorityRule, $defaultPriorityRule]);
        $result = $entry->toString();
        
        // Should be sorted by priority: high (100), low (10), default (0)
        $expected = "User-agent: HighBot\n" .
                   "Allow: /api/\n" .
                   "\n" .
                   "User-agent: LowBot\n" .
                   "Disallow: /test/\n" .
                   "\n" .
                   "User-agent: *\n" .
                   "Disallow: /admin/";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withSameUserAgentGrouping(): void
    {
        $rule1 = RobotsTxtRule::forAgent('Googlebot', [RobotsTxtDirective::disallow('/admin/')], 50);
        $rule2 = RobotsTxtRule::forAgent('Googlebot', [RobotsTxtDirective::allow('/api/')], 50);
        $rule3 = RobotsTxtRule::forAgent('Bingbot', [RobotsTxtDirective::crawlDelay(10)], 50);
        
        $entry = new RobotsTxtEntry([$rule1, $rule2, $rule3]);
        $result = $entry->toString();
        
        // Same user-agents should be grouped together
        $expected = "User-agent: Googlebot\n" .
                   "Disallow: /admin/\n" .
                   "Allow: /api/\n" .
                   "\n" .
                   "User-agent: Bingbot\n" .
                   "Crawl-delay: 10";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withEmptyDirectives(): void
    {
        $emptyRule = new RobotsTxtRule('EmptyBot', [], 50);
        $validRule = RobotsTxtRule::forAgent('ValidBot', [RobotsTxtDirective::allow('/test/')], 50);
        
        $entry = new RobotsTxtEntry([$emptyRule, $validRule]);
        $result = $entry->toString();
        
        // Rules with empty directives should still appear in output
        $expected = "User-agent: EmptyBot\n" .
                   "\n" .
                   "User-agent: ValidBot\n" .
                   "Allow: /test/";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withSpecialCharactersInComments(): void
    {
        $entry = new RobotsTxtEntry([], [], [
            'Generated on 2024-01-01 @ 12:00:00',
            'Author: John Doe <john@example.com>',
            'Special chars: !@#$%^&*()[]{}|\\:";\'<>?,./'
        ]);
        $result = $entry->toString();
        
        $expected = "# Generated on 2024-01-01 @ 12:00:00\n" .
                   "# Author: John Doe <john@example.com>\n" .
                   "# Special chars: !@#$%^&*()[]{}|\\:\";'<>?,./";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withComplexSitemapUrls(): void
    {
        $entry = new RobotsTxtEntry([], [
            'https://example.com/sitemap.xml?version=1.0&lang=en',
            'https://subdomain.example.com/sitemaps/news.xml',
            'https://example.com/sitemap-index.xml#section1'
        ]);
        $result = $entry->toString();
        
        $expected = "Sitemap: https://example.com/sitemap.xml?version=1.0&lang=en\n" .
                   "Sitemap: https://subdomain.example.com/sitemaps/news.xml\n" .
                   "Sitemap: https://example.com/sitemap-index.xml#section1";
        $this->assertEquals($expected, $result);
    }

    public function test_toString_withMixedPriorityAndSameUserAgent(): void
    {
        $rule1 = RobotsTxtRule::forAgent('TestBot', [RobotsTxtDirective::disallow('/low/')], 10);
        $rule2 = RobotsTxtRule::forAgent('TestBot', [RobotsTxtDirective::allow('/high/')], 100);
        $rule3 = RobotsTxtRule::forAgent('OtherBot', [RobotsTxtDirective::crawlDelay(5)], 50);
        
        $entry = new RobotsTxtEntry([$rule1, $rule2, $rule3]);
        $result = $entry->toString();
        
        // Should be sorted by priority first, then grouped by user-agent
        $expected = "User-agent: TestBot\n" .
                   "Allow: /high/\n" .
                   "Disallow: /low/\n" .
                   "\n" .
                   "User-agent: OtherBot\n" .
                   "Crawl-delay: 5";
        $this->assertEquals($expected, $result);
    }
} 