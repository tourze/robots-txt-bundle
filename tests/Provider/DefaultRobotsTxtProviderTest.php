<?php

namespace Tourze\RobotsTxtBundle\Tests\Provider;

use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\TestCase;
use Tourze\RobotsTxtBundle\Model\RobotsTxtDirective;
use Tourze\RobotsTxtBundle\Model\RobotsTxtEntry;
use Tourze\RobotsTxtBundle\Model\RobotsTxtRule;
use Tourze\RobotsTxtBundle\Provider\DefaultRobotsTxtProvider;
use Tourze\RobotsTxtBundle\Provider\RobotsTxtProviderInterface;

/**
 * @internal
 */
#[CoversClass(DefaultRobotsTxtProvider::class)]
final class DefaultRobotsTxtProviderTest extends TestCase
{
    private DefaultRobotsTxtProvider $provider;

    protected function setUp(): void
    {
        parent::setUp();

        $this->provider = new DefaultRobotsTxtProvider();
    }

    public function testProvideReturnsDefaultEntry(): void
    {
        $entry = $this->provider->provide();

        $this->assertInstanceOf(RobotsTxtEntry::class, $entry);
        $this->assertCount(1, $entry->comments);
        $this->assertEquals('Generated by RobotsTxtBundle', $entry->comments[0]);
        $this->assertCount(1, $entry->rules);
        $this->assertEquals([], $entry->sitemaps);
    }

    public function testProvideReturnsCorrectRule(): void
    {
        $entry = $this->provider->provide();
        $rule = $entry->rules[0];

        $this->assertInstanceOf(RobotsTxtRule::class, $rule);
        $this->assertEquals('*', $rule->userAgent);
        $this->assertCount(1, $rule->directives);
        $this->assertEquals(0, $rule->priority);
    }

    public function testProvideReturnsCorrectDirective(): void
    {
        $entry = $this->provider->provide();
        $rule = $entry->rules[0];
        $directive = $rule->directives[0];

        $this->assertInstanceOf(RobotsTxtDirective::class, $directive);
        $this->assertEquals('Disallow', $directive->directive);
        $this->assertEquals('', $directive->value);
    }

    public function testGetPriorityReturnsCorrectValue(): void
    {
        $priority = $this->provider->getPriority();

        $this->assertEquals(-1000, $priority);
    }

    public function testSupportsAlwaysReturnsTrue(): void
    {
        $supports = $this->provider->supports();

        $this->assertTrue($supports);
    }

    public function testProvideGeneratesExpectedOutput(): void
    {
        $entry = $this->provider->provide();
        $output = $entry->toString();

        $expected = "# Generated by RobotsTxtBundle\n" .
                   "\n" .
                   "User-agent: *\n" .
                   'Disallow: ';

        $this->assertEquals($expected, $output);
    }

    public function testProvideMultipleCallsReturnConsistentResults(): void
    {
        $entry1 = $this->provider->provide();
        $entry2 = $this->provider->provide();

        $this->assertEquals($entry1->toString(), $entry2->toString());
        $this->assertEquals($entry1->comments, $entry2->comments);
        $this->assertCount(1, $entry1->rules);
        $this->assertCount(1, $entry2->rules);

        // Check that rules are equivalent but not the same object
        $this->assertEquals($entry1->rules[0]->userAgent, $entry2->rules[0]->userAgent);
        $this->assertEquals($entry1->rules[0]->priority, $entry2->rules[0]->priority);
        $this->assertCount(1, $entry1->rules[0]->directives);
        $this->assertCount(1, $entry2->rules[0]->directives);
    }

    public function testProviderImplementsInterface(): void
    {
        $this->assertInstanceOf(
            RobotsTxtProviderInterface::class,
            $this->provider
        );
    }

    public function testProvideHasNonEmptyComments(): void
    {
        $entry = $this->provider->provide();

        $this->assertNotEmpty($entry->comments);
        $this->assertStringContainsString('Generated', $entry->comments[0]);
    }

    public function testProvideAllowsAllByDefault(): void
    {
        $entry = $this->provider->provide();
        $rule = $entry->rules[0];
        $directive = $rule->directives[0];

        // Empty disallow means allow all
        $this->assertEquals('Disallow', $directive->directive);
        $this->assertEquals('', $directive->value);
        $this->assertEquals('Disallow: ', $directive->toString());
    }
}
